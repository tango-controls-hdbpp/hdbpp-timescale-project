/*----- PROTECTED REGION ID(HdbppHealthCheck.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        HdbppHealthCheck.cpp
//
// description : C++ source for the HdbppHealthCheck class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               HdbppHealthCheck are implemented in this file.
//
// project :     HdbppHealthCheck
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Copyright (C): 2019
//                European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                France
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <HdbppHealthCheck.h>
#include <HdbppHealthCheckClass.h>

#include <chrono>

/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck.cpp

/**
 *  HdbppHealthCheck class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace HdbppHealthCheck_ns
{
/*----- PROTECTED REGION ID(HdbppHealthCheck::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : HdbppHealthCheck::HdbppHealthCheck()
 *	Description : Constructors for a Tango device
 *                implementing the classHdbppHealthCheck
 */
//--------------------------------------------------------
HdbppHealthCheck::HdbppHealthCheck(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(HdbppHealthCheck::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::constructor_1
}
//--------------------------------------------------------
HdbppHealthCheck::HdbppHealthCheck(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(HdbppHealthCheck::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::constructor_2
}
//--------------------------------------------------------
HdbppHealthCheck::HdbppHealthCheck(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(HdbppHealthCheck::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : HdbppHealthCheck::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void HdbppHealthCheck::delete_device()
{
	DEBUG_STREAM << "HdbppHealthCheck::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbppHealthCheck::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects

    // stop the health check thread
    run_health_check = false;

	// join the health check thread
	if (health_check_handler.joinable())
		health_check_handler.join();
	
	/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : HdbppHealthCheck::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void HdbppHealthCheck::init_device()
{
	DEBUG_STREAM << "HdbppHealthCheck::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbppHealthCheck::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(HdbppHealthCheck::init_device) ENABLED START -----*/
	
	//	Initialize device

    // configure the HealthCheck object before starting the thread
    if (!health_check.configure_rest_server_address(restAPIHost, restAPIPort, restAPIRootUrl))
    {
        set_status("Invalid (or missing) reporting server connection properties, please correct/set the properties and try again");
        set_state(Tango::UNKNOWN);
    }
    else
    {
        health_check.enable_host_checks(enableHostCheck);

        // start the the health check thread
        run_health_check = true;
        health_check_handler = thread(&HdbppHealthCheck::health_check_thread, this);

        // initial status, updated by the thread shortly
        set_status("Status will update shortly...");
        set_state(Tango::UNKNOWN);
    }

	/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::init_device
}

//--------------------------------------------------------
/**
 *	Method      : HdbppHealthCheck::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void HdbppHealthCheck::get_device_property()
{
	/*----- PROTECTED REGION ID(HdbppHealthCheck::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("RestAPIHost"));
	dev_prop.push_back(Tango::DbDatum("RestAPIPort"));
	dev_prop.push_back(Tango::DbDatum("RestAPIRootUrl"));
	dev_prop.push_back(Tango::DbDatum("EnableHostCheck"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on HdbppHealthCheckClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		HdbppHealthCheckClass	*ds_class =
			(static_cast<HdbppHealthCheckClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize RestAPIHost from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  restAPIHost;
		else {
			//	Try to initialize RestAPIHost from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  restAPIHost;
		}
		//	And try to extract RestAPIHost value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  restAPIHost;

		//	Try to initialize RestAPIPort from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  restAPIPort;
		else {
			//	Try to initialize RestAPIPort from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  restAPIPort;
		}
		//	And try to extract RestAPIPort value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  restAPIPort;

		//	Try to initialize RestAPIRootUrl from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  restAPIRootUrl;
		else {
			//	Try to initialize RestAPIRootUrl from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  restAPIRootUrl;
		}
		//	And try to extract RestAPIRootUrl value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  restAPIRootUrl;

		//	Try to initialize EnableHostCheck from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  enableHostCheck;
		else {
			//	Try to initialize EnableHostCheck from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  enableHostCheck;
		}
		//	And try to extract EnableHostCheck value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableHostCheck;

	}

	/*----- PROTECTED REGION ID(HdbppHealthCheck::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init

	INFO_STREAM << "restAPIHost : " << restAPIHost << endl;
	INFO_STREAM << "restAPIPort : " << restAPIPort << endl;
	INFO_STREAM << "restAPIRootUrl : " << restAPIRootUrl << endl;

	/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : HdbppHealthCheck::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void HdbppHealthCheck::always_executed_hook()
{
	DEBUG_STREAM << "HdbppHealthCheck::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbppHealthCheck::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : HdbppHealthCheck::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void HdbppHealthCheck::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "HdbppHealthCheck::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbppHealthCheck::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : HdbppHealthCheck::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void HdbppHealthCheck::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(HdbppHealthCheck::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : HdbppHealthCheck::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void HdbppHealthCheck::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(HdbppHealthCheck::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::add_dynamic_commands
}

/*----- PROTECTED REGION ID(HdbppHealthCheck::namespace_ending) ENABLED START -----*/

//	Additional Methods

//--------------------------------------------------------
/**
 *	Method      : HdbppHealthCheck::health_check_thread()
 *	Description :
 */
//--------------------------------------------------------
void HdbppHealthCheck::health_check_thread()
{
	DEBUG_STREAM << "HdbppHealthCheck::health_check_thread()  - " << device_name << endl;

    while (run_health_check)
    {
        if (enableHostCheck)
        {
            auto result = health_check.check_hosts();

            // check if the result is anything but an ok, if its not we change the
            // state of the server
            if (!std::get<0>(result) == HealthCheck::HealthCheckResult::Ok)
            {
                set_status("No problems");
                set_state(Tango::ON);
            }
            else
            {
                set_status(std::get<1>(result));
                
                if (std::get<0>(result) == HealthCheck::HealthCheckResult::ConnectionProblem)
                    set_state(Tango::UNKNOWN);

                else if (std::get<0>(result) == HealthCheck::HealthCheckResult::Error)
                    set_state(Tango::FAULT);

                else if (std::get<0>(result) == HealthCheck::HealthCheckResult::Warning)
                    set_state(Tango::ALARM);

            }
        }
        else
        {
            set_status("No checks currently configured to run");
            set_state(Tango::UNKNOWN);
        }        

        std::this_thread::sleep_for(std::chrono::milliseconds(1000));   
    }
}

/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::namespace_ending
} //	namespace
