/*----- PROTECTED REGION ID(HdbppHealthCheck.h) ENABLED START -----*/
//=============================================================================
//
// file :        HdbppHealthCheck.h
//
// description : Include file for the HdbppHealthCheck class
//
// project :     HdbppHealthCheck
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Copyright (C): 2019
//                European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                France
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef HdbppHealthCheck_H
#define HdbppHealthCheck_H

#include "HealthCheck.h"
#include <tango.h>
#include <thread>
#include <atomic>

/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck.h

/**
 *  HdbppHealthCheck class description:
 *    
 */

namespace HdbppHealthCheck_ns
{
/*----- PROTECTED REGION ID(HdbppHealthCheck::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::Additional Class Declarations

class HdbppHealthCheck : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(HdbppHealthCheck::Data Members) ENABLED START -----*/

//	Add your own data members
private:

    // runs the health check code, basically looks up the summary data on the
    // hdbpp cluster reporting RestAPI
    std::thread health_check_handler;

    // control variable for the thread
    std::atomic<bool> run_health_check;

    // health check functionality is wrapped in this class
    HealthCheck health_check;

/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::Data Members

//	Device property data members
public:
	//	RestAPIHost:	Host to contact when contacting the Reporting RestAPI
	string	restAPIHost;
	//	RestAPIPort:	Port to open when contacting the Reporting RestAPI
	Tango::DevLong	restAPIPort;
	//	RestAPIRootUrl:	Root url to prefix RestAPI requests with.
	string	restAPIRootUrl;
	//	EnableHostCheck:	Enable reading of the host health status from the cluster reporting Rest server.
	Tango::DevBoolean	enableHostCheck;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	HdbppHealthCheck(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	HdbppHealthCheck(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	HdbppHealthCheck(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~HdbppHealthCheck() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : HdbppHealthCheck::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);


	//--------------------------------------------------------
	/**
	 *	Method      : HdbppHealthCheck::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:


	//--------------------------------------------------------
	/**
	 *	Method      : HdbppHealthCheck::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(HdbppHealthCheck::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

private:

    // do the health check and alter the state of the device server if 
    // required
    void health_check_thread();

/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::Additional Method prototypes
};

/*----- PROTECTED REGION ID(HdbppHealthCheck::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	HdbppHealthCheck::Additional Classes Definitions

}	//	End of namespace

#endif   //	HdbppHealthCheck_H
